name: 构建和发布 MacOS校宝打印组件

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发
  workflow_dispatch:  # 允许手动触发

# 设置权限
permissions:
  contents: write  # 需要写权限来创建release
  actions: read
  checks: read

# 并发控制 - 允许取消正在运行的工作流
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
    # 第一阶段：Intel构建
  build-intel:
    name: 🔨 构建 Intel 版本  
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
    - name: 🚀 开始Intel构建
      run: |
        echo "========== Intel构建开始 =========="
        echo "⏰ 开始时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🏗️ Runner环境: $(uname -m)"
        echo "🖥️ 系统版本: $(sw_vers -productVersion)"
        echo "🎯 目标架构: Intel (amd64)"
        echo "📊 可用内存: $(vm_stat | grep 'Pages free' | awk '{print $3}' | sed 's/\.//')页"
        echo "💽 可用磁盘: $(df -h / | tail -1 | awk '{print $4}')"
        echo "🛠️ Homebrew状态: $(brew --version | head -1)"
        echo "=================================="
    
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Go 环境
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: 设置Intel构建环境
      run: |
        echo "设置Intel兼容性环境..."
        echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV
        echo "CGO_CFLAGS=-mmacosx-version-min=10.13" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-mmacosx-version-min=10.13" >> $GITHUB_ENV
        echo "✅ Intel版本目标系统: macOS 10.13+"

    - name: 编译静态Intel版socat
      run: |
        echo "========== 编译静态Intel版socat =========="
        
        # 确保Xcode Command Line Tools可用
        xcode-select --install 2>/dev/null || echo "Xcode CLI tools already installed"
        
        # 安装编译依赖
        brew install autoconf automake libtool
        
        # 下载socat源码
        SOCAT_VERSION="1.8.0.0"
        curl -L -o socat-${SOCAT_VERSION}.tar.gz http://www.dest-unreach.org/socat/download/socat-${SOCAT_VERSION}.tar.gz
        tar -xzf socat-${SOCAT_VERSION}.tar.gz
        cd socat-${SOCAT_VERSION}
        
        # 简化的静态编译配置
        echo "🔧 配置静态编译..."
        export CC="clang"
        export CFLAGS="-mmacosx-version-min=10.13 -arch x86_64 -O2"
        export LDFLAGS="-mmacosx-version-min=10.13 -arch x86_64"
        
        # 更简单的configure配置
        ./configure \
          --prefix=/tmp/socat-static \
          --disable-readline \
          --disable-openssl \
          --disable-libwrap \
          --disable-pty \
          --disable-ext2 \
          --disable-socks4 \
          --disable-socks4a \
          --disable-proxy \
          --disable-tcpwrap
        
        # 编译
        echo "🔨 编译socat..."
        make -j$(sysctl -n hw.ncpu) || make  # 如果并行编译失败，尝试单线程
        
        # 手动安装
        mkdir -p /tmp/socat-static/bin
        cp socat /tmp/socat-static/bin/
        
        # 验证编译结果
        STATIC_SOCAT="/tmp/socat-static/bin/socat"
        echo "📁 编译的socat位置: $STATIC_SOCAT"
        file "$STATIC_SOCAT"
        
        # 检查依赖（应该主要是系统库）
        echo "🔍 检查依赖库:"
        otool -L "$STATIC_SOCAT" | head -10
        
        # 测试基本功能
        "$STATIC_SOCAT" -V
        
        # 准备文件
        mkdir -p ../build-assets
        cp "$STATIC_SOCAT" ../build-assets/socat
        chmod +x ../build-assets/socat
        
        echo "✅ Intel版socat编译完成"
        cd ..

    - name: 构建Intel应用程序
      run: |
        APP_NAME="MacOS校宝打印组件"
        BUILD_DIR="build-amd64"
        mkdir -p "$BUILD_DIR"
        
        echo "🔨 构建Intel版本..."
        go build -ldflags="-s -w" -o "$BUILD_DIR/$APP_NAME" .
        
        echo "📋 复制必需文件..."
        cp config.yaml "$BUILD_DIR/" 2>/dev/null || echo "⚠️ config.yaml不存在"
        cp hprt-pos-printer-driver-v1.2.16.pkg "$BUILD_DIR/" 2>/dev/null || echo "⚠️ 驱动文件不存在"
        cp build-assets/socat "$BUILD_DIR/"
        chmod +x "$BUILD_DIR/socat"
        
        # 验证socat
        echo "🔍 验证bundled socat..."
        file "$BUILD_DIR/socat"
        echo "依赖库列表:"
        otool -L "$BUILD_DIR/socat" | head -10
        
        echo "✅ Intel版本构建完成"
        ls -la "$BUILD_DIR/"

    - name: 创建Intel压缩包
      run: |
        TIMESTAMP=$(date '+%Y%m%d-%H%M')
        ZIP_NAME="MacOS校宝打印组件-Intel-${TIMESTAMP}.zip"
        cd build-amd64
        zip -r "../$ZIP_NAME" .
        cd ..
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
        echo "✅ Intel压缩包: $ZIP_NAME ($(ls -lh $ZIP_NAME | awk '{print $5}'))"

    - name: 上传Intel产物
      uses: actions/upload-artifact@v4
      with:
        name: macos-clodop-schoolpal-Intel
        path: ${{ env.ZIP_NAME }}

  # 第二阶段：ARM构建（依赖Intel完成）
  build-arm:
    name: 🔨 构建 ARM 版本  
    runs-on: macos-14
    timeout-minutes: 30
    needs: build-intel  # 等待Intel构建完成
    
    steps:
    - name: 🚀 开始ARM构建
      run: |
        echo "========== ARM构建开始 =========="
        echo "⏰ 开始时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🏗️ Runner环境: $(uname -m)"
        echo "🎯 目标架构: ARM (arm64)"
        echo "⌛ Intel构建状态: ${{ needs.build-intel.result }}"
        echo "=================================="
    
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Go 环境
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: 设置ARM构建环境
      run: |
        echo "设置ARM兼容性环境..."
        echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
        echo "CGO_CFLAGS=-mmacosx-version-min=11.0" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-mmacosx-version-min=11.0" >> $GITHUB_ENV
        echo "✅ ARM版本目标系统: macOS 11.0+"

    - name: 编译静态ARM版socat
      run: |
        echo "========== 编译静态ARM版socat =========="
        
        # 确保Xcode Command Line Tools可用
        xcode-select --install 2>/dev/null || echo "Xcode CLI tools already installed"
        
        # 安装编译依赖
        brew install autoconf automake libtool
        
        # 下载socat源码
        SOCAT_VERSION="1.8.0.0"
        curl -L -o socat-${SOCAT_VERSION}.tar.gz http://www.dest-unreach.org/socat/download/socat-${SOCAT_VERSION}.tar.gz
        tar -xzf socat-${SOCAT_VERSION}.tar.gz
        cd socat-${SOCAT_VERSION}
        
        # 简化的ARM编译配置
        echo "🔧 配置ARM编译..."
        export CC="clang"
        export CFLAGS="-mmacosx-version-min=11.0 -arch arm64 -O2"
        export LDFLAGS="-mmacosx-version-min=11.0 -arch arm64"
        
        # 更简单的configure配置
        ./configure \
          --prefix=/tmp/socat-static \
          --disable-readline \
          --disable-openssl \
          --disable-libwrap \
          --disable-pty \
          --disable-ext2 \
          --disable-socks4 \
          --disable-socks4a \
          --disable-proxy \
          --disable-tcpwrap
        
        # 编译
        echo "🔨 编译ARM版socat..."
        make -j$(sysctl -n hw.ncpu) || make  # 如果并行编译失败，尝试单线程
        
        # 手动安装
        mkdir -p /tmp/socat-static/bin
        cp socat /tmp/socat-static/bin/
        
        # 验证编译结果
        STATIC_SOCAT="/tmp/socat-static/bin/socat"
        echo "📁 编译的socat位置: $STATIC_SOCAT"
        file "$STATIC_SOCAT"
        
        # 检查依赖（应该主要是系统库）
        echo "🔍 检查依赖库:"
        otool -L "$STATIC_SOCAT" | head -10
        
        # 测试基本功能
        "$STATIC_SOCAT" -V
        
        # 准备文件
        mkdir -p ../build-assets
        cp "$STATIC_SOCAT" ../build-assets/socat
        chmod +x ../build-assets/socat
        
        echo "✅ ARM版socat编译完成"
        cd ..

    - name: 构建ARM应用程序
      run: |
        APP_NAME="MacOS校宝打印组件"
        BUILD_DIR="build-arm64"
        mkdir -p "$BUILD_DIR"
        
        echo "🔨 构建ARM版本..."
        go build -ldflags="-s -w" -o "$BUILD_DIR/$APP_NAME" .
        
        echo "📋 复制必需文件..."
        cp config.yaml "$BUILD_DIR/" 2>/dev/null || echo "⚠️ config.yaml不存在"
        cp hprt-pos-printer-driver-v1.2.16.pkg "$BUILD_DIR/" 2>/dev/null || echo "⚠️ 驱动文件不存在"
        cp build-assets/socat "$BUILD_DIR/"
        chmod +x "$BUILD_DIR/socat"
        
        # 验证socat
        echo "🔍 验证bundled socat..."
        file "$BUILD_DIR/socat"
        echo "依赖库列表:"
        otool -L "$BUILD_DIR/socat" | head -10
        
        echo "✅ ARM版本构建完成"
        ls -la "$BUILD_DIR/"

    - name: 创建ARM压缩包
      run: |
        TIMESTAMP=$(date '+%Y%m%d-%H%M')
        ZIP_NAME="MacOS校宝打印组件-ARM-${TIMESTAMP}.zip"
        cd build-arm64
        zip -r "../$ZIP_NAME" .
        cd ..
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
        echo "✅ ARM压缩包: $ZIP_NAME ($(ls -lh $ZIP_NAME | awk '{print $5}'))"

    - name: 上传ARM产物
      uses: actions/upload-artifact@v4
      with:
        name: macos-clodop-schoolpal-ARM
        path: ${{ env.ZIP_NAME }}


  # 发布汇总
  release:
    name: 📦 创建发布
    needs: [build-intel, build-arm]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && always()
    
    steps:
    - name: 下载所有产物
      uses: actions/download-artifact@v4
      
    - name: 创建发布
      if: ${{ needs.build-intel.result == 'success' && needs.build-arm.result == 'success' }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          macos-clodop-schoolpal-Intel/*
          macos-clodop-schoolpal-ARM/*
        name: MacOS校宝打印组件 ${{ github.ref_name }}
        body: |
          ## 🎉 MacOS校宝打印组件 ${{ github.ref_name }}
          
          **✅ 构建状态**: 
          - Intel版本: ${{ needs.build-intel.result }}
          - ARM版本: ${{ needs.build-arm.result }}
          
          **📥 下载说明**:
          - Intel Mac用户: 下载 `MacOS校宝打印组件-Intel-*.zip`
          - Apple Silicon Mac用户: 下载 `MacOS校宝打印组件-ARM-*.zip`
          
          **🚀 新特性**:
          - ✅ 完全独立运行，无需安装任何依赖
          - ✅ 内置静态编译的socat，解决动态库依赖问题
          - ✅ 支持在任何macOS系统上直接运行
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 